RELEASE NOTES
***************

2010-01-10  Daniel Graziotin  <daniel DOT graziotin AT gmail DOT com>

Dycapo 0.0.2 is just for _showing_out_some_functionalities_ of the system and 
testing the underlying technologies. 
Dycapo 0.0.2 incorporates and shows:
- OpenTrip Core adoption and OpenTrip Dynamic data structures proposal (in Django Model format)
- Use of XML-RPC with Django (rpc4django over HTTP and HTTPS)
- (Sort of) integration of Dycapo models with Django and rpc4django
- Authentication
- Insertion of a trip by a driver
- Start of a trip by a driver
- Search of a trip by a rider
- Send a ride request to a driver
- Let the driver accept the ride request

No one exported XML-RPC function will surely be included in the final API!
No one exported XML-RPC function is either optimized or completely working!

Code is (somewhat) documented. Expect a completely better work for 0.1.0 :)


CHANGES SINCE 0.0.1
***************
Some refactoring to make the code cleaner. 
Lots of bugs fixed.
Test suite rewritten and (finally) fully working.

models.py:
- added utility methods (i.e. __unicode__ and to_xmlrpc)
- use of OpenTrip id proposal instead of Django id
- addition of fields to Participation model, regarding a ride request and a request accepted

trip.py:
this module has been splitted in four files:
- driver.py - holds all the XML-RPC methods that a Driver needs.
- rider.py - holds all the XML-RPC methods that a Rider needs.
- commin.py - will hold all the XML-RPC methods shared by Rider and Driver
- utils.py - holds some utility functions.

driver.py (formerly trip.py):
- added check_ride_requests(trip) - checks for ride requests
- added accept_ride_request(trip, person) - for accepting a Rider

rider.py (formerly trip.py):
- added request_ride(trip) - sends a ride request to a trip

tests/:
- Cleaner code and better organization
- Added test_all_simple.py - creates a Driver and a Rider with the same destination as target
- test_all.py - creates 3 drivers and 5 riders with random locations as target
